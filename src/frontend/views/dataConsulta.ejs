<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://rsms.me/">
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css">

    <title>Cadastro de Horários</title>
</head>

    <!-- dark mode -->
    
    <div class="toggle">
      <input id="switch" type="checkbox" name="theme">
      <label for="switch">Toggle</label>
    </div>
  
  <!-- -------- -->
  
  <body>
    <div id="container">
        <div id="header">
          <div id="monthDisplay"></div>
  
          <div>
            <button id="backButton">Voltar</button>
            <button id="nextButton">Próximo</button>
          </div>
            
        </div>
  
        <div id="weekdays">
          <div>Domingo</div>
          <div>Segunda-feira</div>
          <div>Terça-feira</div>
          <div>Quarta-feira</div>
          <div>Quinta-feira</div>
          <div>Sexta-feira</div>
          <div>Sábado</div>
        </div>
  
  
        <!-- div dinamic -->
        <div id="calendar" ></div>
  
     
    </div>
  
    <div id="newEventModal">
      <h2>Selecione um Horário: </h2>
  
      <form id="eventTitleInput" >
        <div>
          <input type="radio" name="horario" id="horario" value="12h até 13h" onclick="openModal(clicked, '12h até 13h')"> 12h até 13h
        </div>
        <br>
        <div>
          <input type="radio" name="horario" id="horario" value="13h até 14h" onclick="openModal(clicked, '13h até 14h')"> 13h até 14h
        </div>
        <br>
        <div>
          <input type="radio" name="horario" id="horario" value="14h até 15h" onclick="openModal(clicked, '14h até 15h')"> 14h até 15h
        </div>
        <br>
        <div>
          <input type="radio" name="horario"id="horario" value="15h até 16h" onclick="openModal(clicked, '15h até 16h')"> 15h até 16h
        </div>
        <br>
        <div>
          <input type="radio" name="horario"id="horario" value="16h até 17h" onclick="openModal(clicked, '16h até 17h')"> 16h até 17h
        </div>
        <br>
        <div>
          <input type="radio" name="horario" id="horario" value="17h até 18h" onclick="openModal(clicked, '17h até 18h')"> 17h até 18h
        </div>
        <br>
        <div>
          <input type="radio" name="horario" id="horario" value="18h até 19h" onclick="openModal(clicked, '18h até 19h')"> 18h até 19h
        </div>
        <br>
        <button id="saveButton"> Salvar</button>
      <button id="cancelButton">Cancelar</button>
    </div>
  
    <div id="deleteEventModal">
      <h2>Evento</h2>
  
      <div id="eventText"></div><br>
  
  
      <button id="deleteButton">Deletar</button>
      <button id="closeButton">Fechar</button>
    </div>
  
    <div id="modalBackDrop"></div>
  
  
    <script src="/src/frontend/scripts/darkMode.js"></script>
    <script src="/src/frontend/scripts/main.js"></script>
    
  </body>
  </html>

</body>

</html>
<script>
  //light-mode
  
// variaveis globais

let nav = 0
let clicked = null
let events = localStorage.getItem('events') ? JSON.parse(localStorage.getItem('events')) : []


// variavel do modal:
const newEvent = document.getElementById('newEventModal')
const deleteEventModal = document.getElementById('deleteEventModal')
const backDrop = document.getElementById('modalBackDrop')
const eventTitleInput = document.getElementById('eventTitleInput')
// --------
const calendar = document.getElementById('calendar') // div calendar:
const weekdays = ['domingo','segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado'] //array with weekdays:

//funções

function openModal(date){
  clicked = date
  const eventDay = events.find((event)=>event.date === clicked)
 

  if (eventDay){
   document.getElementById('eventText').innerText = eventDay.title
   deleteEventModal.style.display = 'block'


  } else{
    newEvent.style.display = 'block'

  }

  backDrop.style.display = 'block'
}

//função load() será chamada quando a pagina carregar:

function load (){ 
  const date = new Date() 
  

  //mudar titulo do mês:
  if(nav !== 0){
    date.setMonth(new Date().getMonth() + nav) 
  }
  
  const day = date.getDate()
  const month = date.getMonth()
  const year = date.getFullYear()

  
  
  const daysMonth = new Date (year, month + 1 , 0).getDate()
  const firstDayMonth = new Date (year, month, 1)
  

  const dateString = firstDayMonth.toLocaleDateString('pt-br', {
    weekday: 'long',
    year:    'numeric',
    month:   'numeric',
    day:     'numeric',
  })
  

  const paddinDays = weekdays.indexOf(dateString.split(', ') [0])
  
  //mostrar mês e ano:
  document.getElementById('monthDisplay').innerText = `${date.toLocaleDateString('pt-br',{month: 'long'})}, ${year}`

  
  calendar.innerHTML =''

  // criando uma div com os dias:

  for (let i = 1; i <= paddinDays + daysMonth; i++) {
    const dayS = document.createElement('div')
    dayS.classList.add('day')

    const dayString = `${month + 1}/${i - paddinDays}/${year}`

    //condicional para criar os dias de um mês:
     
    if (i > paddinDays) {
      dayS.innerText = i - paddinDays
      

      const eventDay = events.find(event=>event.date === dayString)
      
      if(i - paddinDays === day && nav === 0){
        dayS.id = 'currentDay'
      }


      if(eventDay){
        const eventDiv = document.createElement('div')
        eventDiv.classList.add('event')
        eventDiv.innerText = eventDay.title
        dayS.appendChild(eventDiv)

      }

      dayS.addEventListener('click', ()=> openModal(dayString))

    } else {
      dayS.classList.add('padding')
    }
    calendar.appendChild(dayS)
  }
}

document.getElementById('cancelButton').addEventListener('click', () => {
  closeModal();
});
function closeModal(){
  eventTitleInput.classList.remove('error')
  newEvent.style.display = 'none'
  backDrop.style.display = 'none'
  deleteEventModal.style.display = 'none'

  eventTitleInput.value = ''
  clicked = null
  load()

}
function saveEvent(){
  if(eventTitleInput.value){
    eventTitleInput.classList.remove('error')

    events.push({
      date: clicked,
      title: eventTitleInput.value
    })

    localStorage.setItem('events', JSON.stringify(events))
    closeModal()

  }else{
    eventTitleInput.classList.add('error')
  }
}

function deleteEvent(){

  events = events.filter(event => event.date !== clicked)
  localStorage.setItem('events', JSON.stringify(events))
  closeModal()
}

// botões 

function buttons (){
  document.getElementById('backButton').addEventListener('click', ()=>{
    nav--
    load()
    
  })

  document.getElementById('nextButton').addEventListener('click',()=>{
    nav++
    load()
    
  })

  document.getElementById('saveButton').addEventListener('click',()=> saveEvent())

  document.getElementById('cancelButton').addEventListener('click',()=>closeModal())

  document.getElementById('deleteButton').addEventListener('click', ()=>deleteEvent())

  document.getElementById('closeButton').addEventListener('click', ()=>closeModal())
  
}
buttons()
load()

  //dark-mode
  const html = document.querySelector('html')
const checkbox = document.querySelector("input[name=theme]")

const getStyle = (element, style) => 
    window
        .getComputedStyle(element)
        .getPropertyValue(style)


const initialColors = {
  bodyColor: getStyle(html, '--body-color'),
  headerColor: getStyle(html, '--header-color'),
  headerButton: getStyle(html, '--header-button'),
  colorWeekdays: getStyle(html, '--color-weekdays'),
  currentDay: getStyle(html, '--current-day'),
  eventColor: getStyle(html, '--event-color'),
  eventColor: getStyle(html, '--event-color'),
  colorDay: getStyle(html, '--color-day'),
  modalEvent: getStyle(html, '--modal-event') 
}

const darkMode = {
  bodyColor:'#282a36',
  headerColor: '#49A2EB',
  headerButton:'#bd93f9',
  colorWeekdays: '#6272a4' ,
  currentDay: '#f8f8f2',
  eventColor: '#6272a4',
  colorDay: '#44475a',
  modalEvent: '#6272a4'
  
}

const transformKey = key => 
    "--" + key.replace(/([A-Z])/, "-$1").toLowerCase()


const changeColors = (colors) => {
    Object.keys(colors).map(key => {
        html.style.setProperty(transformKey(key), colors[key]) 
        console.log(transformKey(key), colors[key])
      }
    )
    console.log(colors)
}


checkbox.addEventListener("change", ({target}) => {
    target.checked ? changeColors(darkMode) : changeColors(initialColors)
})

//banco de dados


  buttons.forEach((button) => {
  button.addEventListener("click", function () {
    const mesEscolhido = button.getAttribute("data-mes");
    const idMedicos = button.getAttribute("data-id-medicos");
    window.location.href = "/dataConsulta/" + mesEscolhido + "/" + idMedicos;
  });
});

</script>

<style>
  html{


--body-color:#FFFCFF ;

--header-color:#49A2EB;

--header-button:#1437aa;

--color-weekdays: #000000;

--box-shadow: #CBD4C2;

--hover: #e8faed;

--current-day:#e8f4fa;

--event-color: #FFFCFF;

--modal-event: #e8f4fa;


--color-day:white;


}

body {
display: flex;
margin-top: 50px;
justify-content: center;
background-color: var(--body-color);
}
button {
width: 75px;
cursor: pointer;
box-shadow: 0px 0px 2px gray;
border: none;
outline: none;
padding: 5px;
border-radius: 5px;
color: white;
}

#header {
padding: 10px;
color: var(--header-color) ;
font-size: 26px;
font-family: sans-serif;
display: flex;
justify-content: space-between;
}
#header button {
background-color:var(--header-button);
}
#container {
width: 770px;
}
#weekdays {
width: 100%;
display: flex;
color: var(--color-weekdays) ;
}
#weekdays div {
width: 100px;
padding: 10px;
}
#calendar {
width: 100%;
margin: auto;
display: flex;
flex-wrap: wrap;
}
.day {
width: 100px;
padding: 10px;
height: 100px;
cursor: pointer;
box-sizing: border-box;
background-color: var(--color-day);
margin: 5px;
box-shadow: 0px 0px 3px var(--box-shadow);
display: flex;
flex-direction: column;
justify-content: space-between;
border-radius: 15%;
}
.day:hover {
background-color: var(--hover);
}

.day + #currentDay {
background-color:var(--current-day);
}
.event {
font-size: 10px;
padding: 3px;
background-color: var(--event-color);
color: white;
border-radius: 5px;
max-height: 55px;
overflow: hidden;
}
.padding {
cursor: default !important;
background-color: var(--body-color) !important;
box-shadow: none !important;
}
#newEventModal, #deleteEventModal {
display: none;
z-index: 20;
padding: 25px;
background-color: #FFFCFF;
box-shadow: 0px 0px 3px black;
border-radius: 5px;
width: 350px;
top: 100px;
left: calc(50% - 175px);
position: absolute;
font-family: sans-serif;
}
#eventTitleInput {
padding: 10px;
width: 100%;
box-sizing: border-box;
margin-bottom: 25px;
border-radius: 3px;
outline: none;
border: none;
box-shadow: 0px 0px 3px gray;
}
#eventTitleInput.error {
border: 2px solid red;
}
#cancelButton, #deleteButton {
background-color: var(--header-color);
}
#saveButton, #closeButton {
background-color: var(--header-button);
}
#eventText {
font-size: 14px;
}
#modalBackDrop {
display: none;
top: 0px;
left: 0px;
z-index: 10;
width: 100vw;
height: 100vh;
position: absolute;
background-color: rgba(0,0,0,0.8);
}
.radio-group label {
display: flex;
align-items: center;
}

.radio-group input[type="radio"] {
margin-right: 5px;
}

input[type=checkbox]{
  height: 0;
  width: 0;
  visibility: hidden;
}

label {
  cursor: pointer;
  text-indent: -9999px;
  width: 52px;
  height: 27px;
  background: grey;
  float: right;
  border-radius: 100px;
  position: relative;
  left: -50px;
}

label::after{
  content: '';
  position: absolute;
  top: 3px;
  left: 3px;
  width: 20px;
  height: 20px;
  background-color: white;
  border-radius: 90px;
  transition: 0.3s;
}

input:checked + label {
  background-color: rgb(142, 142, 240);
}

input:checked + label::after {
  left: calc(100% - 5px);
  transform: translateX(-100%);
}

label:active:after {
  width: 45px;
}


</style>